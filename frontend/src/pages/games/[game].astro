---
import Layout from '../../layouts/Layout.astro';
import { GamesAPI } from '../../lib/api';
import StreamerCard from '../../components/StreamerCard.jsx';

const { game } = Astro.params;
const decodedGame = decodeURIComponent(game || '');

let streamers: Array<{
  streamer_name: string;
  viewers_count: number;
  game: string;
  title: string;
  snapshot_at?: string;
}> = [];
let error = null;

try {
  const gameData = await GamesAPI.getByName(decodedGame);
  
  if (gameData && gameData.length > 0) {
    // Agrupar por streamer para evitar duplicados
    const streamerMap: Record<string, { streamer_name: string; viewers_count: number; game: string; title: string; snapshot_at?: string }> = {};
    gameData.forEach((item: { streamer_name: string; viewers_count: number; game: string; title: string; snapshot_at?: string }) => {
      if (
        !streamerMap[item.streamer_name] ||
        new Date(streamerMap[item.streamer_name].snapshot_at || 0) < new Date(item.snapshot_at || 0)
      ) {
        streamerMap[item.streamer_name] = item;
      }
    });
    
    streamers = Object.values(streamerMap);
    
    // Ordenar por viewers
    streamers.sort((a, b) => b.viewers_count - a.viewers_count);
  } else {
    error = `No se encontraron streamers para el juego "${decodedGame}"`;
  }
} catch (err) {
  console.error(`Error al obtener datos para el juego ${decodedGame}:`, err);
  error = `Error al cargar datos para el juego "${decodedGame}"`;
  
  // Datos de fallback
  streamers = Array(4)
    .fill({
      streamer_name: '',
      viewers_count: 0,
      game: decodedGame,
      title: 'Sin datos disponibles'
    })
    .map((item, i) => ({
      ...item,
      streamer_name: `Streamer ${i + 1}`
    }));
}
---

<Layout title={`${decodedGame} - Juegos de Twitch`}>
  <div class="bg-gradient-to-r from-purple-900 to-purple-700 text-white py-12">
    <div class="container mx-auto px-4">
      <h1 class="text-3xl md:text-4xl font-bold">{decodedGame}</h1>
      <p class="mt-2 text-purple-200">Streamers jugando a este juego</p>
    </div>
  </div>
  
  <div class="container mx-auto px-4 py-12">
    <h2 class="text-2xl font-bold text-gray-800 mb-8">Streamers Populares de {decodedGame}</h2>
    
    {error && (
      <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-8" role="alert">
        <strong class="font-bold">Atenci√≥n:</strong>
        <span class="block sm:inline"> {error}</span>
      </div>
    )}
    
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {streamers.map((streamer) => (
        <StreamerCard streamer={streamer} />
      ))}
    </div>
  </div>
</Layout>